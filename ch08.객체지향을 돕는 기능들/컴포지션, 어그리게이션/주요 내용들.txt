다중 상속의 문제
1. 클래스가 커진다.
부모 클래스 A,B,C와 상속받은 자식 클래스 D,E,F가 있다 할때 부모 클래스의 멤버함수를 상속받아 재정의했다고 가정해보자.
이때 부모 클래스 A,B,C의 멤버 함수가 변경되면 자식 클래스도 다시 수정해야하고
이 함수를 사용하는 클래스나 함수도 역시 다 수정해야한다.
->서로 의존도(결합도[coupling])가 높아짐.
2. 컴파일 시간이 늘어난다.

대안
다중 상속으로 코드를 재사용 하는 것이 아닌 재사용할 속성과 기능을 별도의 클래스로 분리하고
이 클래스를 멤버 변수로 포함하는 것이다.

1. 컴포지션(composition) : 분리한 클래스를 포함(part-of)하는 개념
클래스가 가져야할 특징을 다른 클래스로부터 상속받는 것이 아닌 멤버 변수로 포함하기
ex) monster_a -> monster_attribute(monster 객체를 만듬), character_attribute(character 객체를 만듬)을 내부 구성으로 사용함.
객체의 생성, 소멸하는 생명 주기도 같아짐.

2. 어그리게이션(aggregation) : 분리한 클래스를 사용(has-a)하는 개념
클래스가 가져야할 특징을 다른 클래스로부터 상속받는 것이 아닌 멤버 변수로 포함하기. 그러나 어그리게이션은 분리된 클래스의 객체를 포인터나 레퍼런스 변수로 포함한다.
ex) monster_a -> &monster_attribute(monster 객체를 가리킴), &character_attribute(character 객체를 가리킴)을 내부 구성으로 사용함.




