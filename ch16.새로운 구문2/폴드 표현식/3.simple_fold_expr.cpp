#include <iostream>

using namespace std;

// 단항 왼쪽 폴드 표현식
template<typename... numbers>
double unary_left(numbers... num_list) {
  return (... / num_list );
}

// 단항 오른쪽 폴드 표현식
template<typename... numbers>
double unary_right(numbers... num_list) {
  return (num_list / ...);
}

// 이항 왼쪽 폴드 표현식
template<typename... numbers>
double binary_left(numbers... num_list) {
  return (10.0 / ... / num_list);
}

// 이항 오른쪽 폴드 표현식
template<typename... numbers>
double binary_right(numbers... num_list) {
  return (num_list / ... / 10.0);
}

int main() {

  cout << "단항 왼쪽 폴드 표현식: " << 
    unary_left(1.0, 2.0, 3.0, 4.0, 5.0, 6.0) << endl; //((((1.0 / 2.0) / 3.0) / 4.0) / 5.0) / 6.0
  /*
  1.0 / 2.0 = 0.5
  0.5 / 3.0 = 0.166666...
  0.166666... / 4.0 = 0.041666...
  0.041666... / 5.0 = 0.008333...
  0.008333... / 6.0 = 0.001388...
  */

  cout << "단항 오른쪽 폴드 표현식: " <<
    unary_right(1.0, 2.0, 3.0, 4.0, 5.0, 6.0) << endl; //1.0 / (2.0 / (3.0 / (4.0 / (5.0 / 6.0))))
  /*
  5.0 / 6.0 = 0.833333...
  4.0 / 0.833333... = 4.8
  3.0 / 4.8 = 0.625
  2.0 / 0.625 = 3.2
  1.0 / 3.2 = 0.3125
  */

  cout << "이항 왼쪽 폴드 표현식: " <<
    binary_left(1.0, 2.0, 3.0, 4.0, 5.0, 6.0) << endl; //((((10.0 / 1.0) / 2.0) / 3.0) / 4.0) / 5.0) / 6.0
  /*
  10.0 / 1.0 = 10.0
  10.0 / 2.0 = 5.0
  5.0 / 3.0 = 1.666666...
  1.666666... / 4.0 = 0.416666...
  0.416666... / 5.0 = 0.083333...
  0.083333... / 6.0 = 0.013888...
  */

  cout << "이항 오른쪽 폴드 표현식: " <<
    binary_right(1.0, 2.0, 3.0, 4.0, 5.0, 6.0) << endl; //1.0 / (2.0 / (3.0 / (4.0 / (5.0 / (6.0 / 10.0)))))
  /*
  6.0 / 10.0 = 0.6
  5.0 / 0.6 = 8.333333...
  4.0 / 8.333333... = 0.48
  3.0 / 0.48 = 6.25
  2.0 / 6.25 = 0.32
  1.0 / 0.32 = 3.125
  */
}