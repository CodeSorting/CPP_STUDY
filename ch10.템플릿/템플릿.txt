함수와 지역 변수는 소스코드를 오브젝트 코드로 만들 때 (컴파일 할 때) 스택 메모리의 크기가 정해진다.
그리고 운영체제가 프로그램을 실행할 때 실제 매모리에 적재한다.

따라서 함수에서 사용한 템플릿 매개변수 역시 컴파일 과정에서 실제 데이터 형식으로 대체되어 메모리 크기가 정해져야한다.

컴파일러는 함수 템플릿을 호출하는 구문을 만나면 인자로 전달한 값으로 템플릿 매개변수의 데이터 형식을 추론하고,
이 형식으로 완성된 함수를 오브젝트 코드로 만든다.
이 과정을 템플릿의 인스턴스화라고 한다.

template <typename T>
T data_sum(T operand1, T operand2) {
  return operand1 + operand2;
}

char data7[] = "Hello, ", data8[] = "New World!";
cout << "문자데이터 배열의 합" << data_sum(data7, data8) << endl;
위 코드의 경우 데이터 형식 추론이 잘못된 호출이므로 컴파일이 중단된다.
형식 추론은 시간이 많이 걸리는 작업이니 내가 직접 명시적으로 이용할 수도 있다.

data_sum(data7, data8) -> data_sum<string>(data7, data8)으로 하면 컴파일러가
바로 char 배열을 string 타입으로 변환해 호출한다.

function_template_specialization.cpp처럼 템플릿을 특수화 시킬 수도 있다.




